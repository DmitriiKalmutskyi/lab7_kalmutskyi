let fnshed = function (begin, end) { // Оголошуємо функцію fnshed з двома параметрами begin і end.
    let dt = new Date(); // Створюємо новий об'єкт Date для поточної дати та часу.
    let msg = dt.toLocaleString(); // Генеруємо рядок, що представляє поточну дату та час у локальному форматі.
    if (dt.getTime()>=end.getTime()) { // Перевіряємо, чи поточний час більший або рівний кінцевому часу.
        clearTimeout(htmr); // Якщо умова виконується, очищаємо таймер htmr.
        msg = msg + ": Подію зупинено"; // Додаємо повідомлення про зупинку події до рядка msg.
    }    
    else if (dt.getTime()>=begin.getTime()) { // Інакше перевіряємо, чи поточний час більший або рівний початковому часу.
        msg = msg + ": Подія працює"; // Додаємо повідомлення про те, що подія продовжує працювати, до рядка msg.
    }
    console.log (msg); // Виводимо рядок msg у консоль.
} 

let now = new Date(); // Створюємо новий об'єкт Date для поточної дати та часу.                   
let begin = new Date(now.getTime() + 3000); // Створюємо новий об'єкт Date для початкового часу події, у якого затримка 3 секунди від поточного часу.
let end =  new Date (now.getTime() + 8000); // Створюємо новий об'єкт Date для кінцевого часу події, який настає через 8 секунд після поточного часу.     
htmr = setInterval(fnshed, 1000, begin, end ); // Встановлюємо інтервал виклику функції fnshed кожної секунди, передаючи початковий і кінцевий час як аргументи.
console.log (now.toLocaleString () + " Планувальник запущено:"); // Виводимо поточну дату та час у локальному форматі разом з повідомленням "Планувальник запущено" у консоль.
console.log ("- початок події о " + begin.toLocaleString()); // Виводимо початковий час події у локальному форматі у консоль.
console.log ("- кінець події о " + end.toLocaleString()); // Виводимо кінцевий час події у локальному форматі у консоль.
